mu1
dat$groups<-paste0(dat$cond, dat$cond2)
mu1<-aggregate(formula = Guilt~groups+trial_block, data = dat, FUN = mean)
mu1
mu1<-aggregate(formula = Guilt~groups+trial_block, data = dat, FUN = mean)
mu2<-aggregate(formula = Dcred~groups+trial_block, data = dat, FUN = mean)
mu3<-aggregate(formula = Vcred~groups+trial_block, data = dat, FUN = mean)
ste1<-aggregate(formula = Guilt~groups+trial_block, data = dat, FUN = se)
ste2<-aggregate(formula = Dcred~groups+trial_block, data = dat, FUN = se)
ste3<-aggregate(formula = Vcred~groups+trial_block, data = dat, FUN = se)
mu1[,1:3]
dplot<-rbind(mu1[,1:2],mu2[,1:2],mu3[,1:2])
dplot$mu<-c(mu1[,3],mu2[,3],mu3[,3])
dplot$se<-c(ste1[,3],ste2[,3],ste3[,3])
ste1
dplot$judge<-rep(c("Guilt", "Verdict", "Defense"), each=120)
judgments<-ggplot(dplot, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.5, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
facet_wrap(~ judge, ncol = 1)+theme_bw()
print(judgments)
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.5, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.5, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dat
dlast<-subset(dat, trial_block==20)
dlast
model1<-lm(Guilt~cond+cond2, data=dlast)
summary(model1)
library(rpart)
tree <- rpart(Guilt ~ ., data=dfinal)
tree <- rpart(Guilt ~ ., data=dlast)
plot(tree, margin=0.1)
text(tree)
tree <- rpart(Guilt ~ cond+cond2, data=dlast)
plot(tree, margin=0.1)
text(tree)
tree <- rpart(Guilt ~ cond+cond2, data=dlast)
plot(tree, margin=0.1)
text(tree)
dlast
tree <- rpart(Guilt ~ cond+cond2, data=dlast)
plot(tree)
text(tree)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
tree <- rpart(Guilt ~ cond+cond2, data=dlast)
plot(tree)
text(tree)
prp(tree)
?prp
prp(tree)
dlast
tree <- rpart(Dcred ~ cond+cond2, data=dlast)
prp(tree)
tree <- rpart(Vcred ~ cond+cond2, data=dlast)
prp(tree)
tree <- rpart(Guilt ~ cond+cond2, data=dlast)
plot(tree)
text(tree)
prp(tree)
tree <- rpart(Vcred ~ cond+cond2, data=dlast)
prp(tree)
?anova
glm(Guilt~groups, data=dat)
summary(glm(Guilt~groups, data=dat))
anova(glm(Guilt~groups, data=dat), glm(Guilt~1, data=dat))
aic(glm(Guilt~groups, data=dat))
AIC(glm(Guilt~groups, data=dat))
a<-rep(0,20)
for (i in 1:20){
a[i]<-AIC(glm(Guilt~groups, data=subset(dat, trial_block==i)))
}
plot(a)
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.5, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
+ stat_smooth()+
#geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth()+
#geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth()+
#geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth(level=0.5)+
#geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth(level=0.5)+
#geom_line(position=pd, width=2) +
#geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth(level=0.5, span=0.2)+
#geom_line(position=pd, width=2) +
#geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
#################################
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth(level=0.5, span=0.5)+
#geom_line(position=pd, width=2) +
#geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
#################################
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth(level=0.5, span=0.4)+
#geom_line(position=pd, width=2) +
#geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
#geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
stat_smooth(level=0.5, span=0.5)+
#geom_line(position=pd, width=2) +
#geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
geom_line(position=pd, width=2) +
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
plot(dplot$trial_block, dplot$mu)
plot(dplot$trial_block, dplot$mu)
print(judgments)
dat
summary(dat)
dat
dat$con2
dat$Co2
dat$Con2
dat
dat$cond2
dat$cond
dat$cond %in% c("NP", "PD")
summary(dat$cond %in% c("NP", "PD"))
dat$cond
summary(dat$cond)
summary(dat$cond %in% c("NP", "PD"))
summary(dat$cond %in% c("NP","PD"))
library(plyr)
dat$sameprior<-mapvalues(dat$cond, from=c("NP", "PD", "PS"), to=c("No", "No", "Yes"))
uniqe(dat$cond)
unique(dat$cond)
dat$sameprior<-mapvalues(dat$cond, from=unique(dat$cond), to=c("No", "No", "Yes"))
dat$sameprior<-ifelse(dat$cond $in$ unique(dat$cond)[1:2], "No", "Yes")
dat$sameprior<-ifelse(dat$cond %in% unique(dat$cond)[1:2], "No", "Yes")
dat$sameprior1<-mapvalues(dat$cond, from=unique(dat$cond), to=c("No", "No", "Yes"))
dat$sameprior2<-ifelse(dat$cond %in% unique(dat$cond)[1:2], "No", "Yes")
dat$samemprior3<-"No"
dat$sameprior3[dat$cond =="PS")<-"Yes"
dat$sameprior3[dat$cond =="PS"]<-"Yes"
dguilt<-subset(dplot, judge=="Guilt")
judgments<-ggplot(dguilt, aes(x=trial_block, y=mu, colour=groups)) +
geom_errorbar(aes(ymin=mu-se, ymax=mu+se), width=0.1, position=pd) +
geom_line(position=pd, width=2) +
ylab(expression(mu))+ggtitle("Mean Judgments")+
theme_bw()
print(judgments)
dguilt
dguilt$guilt
dguilt$Guilt
data
dat
unique(dat$groups)
subset(dat, unique(dat$groups)[1])
subset(dat, groups==unique(dat$groups)[1])
d<-subset(dat, groups==unique(dat$groups)[1])
smooth.spline(d$trial_block, d$Guilt)
m<-smooth.spline(d$trial_block, d$Guilt)
plot(m)
plot(fiited(m))
plot(fitted(m))
plot(predict(m, 1:20))
d$trial_block
?smooth.spline
m<-smooth.spline(d$trial_block, d$Guilt, df=10)
plot(predict(m, 1:20))
m<-smooth.spline(d$trial_block, d$Guilt, df=15)
plot(predict(m, 1:20))
a<-rep(0,20)
for(l in 1:20){
a[l]<-aic(smooth.spline(d$trial_block, d$Guilt, df=15))
}
a<-rep(0,20)
for(l in 1:20){
a[l]<-AIC(smooth.spline(d$trial_block, d$Guilt, df=15))
}
AIC(smooth.spline(d$trial_block, d$Guilt, df=15))
library(splines)
a[l]<-AIC(lm(Guilt~ns(trial_blockm,df=15), data=d)
)
AIC(lm(Guilt~ns(trial_block,df=15), data=d))
a<-rep(0,20)
for(l in 1:20){
a[l]<-AIC(lm(Guilt~ns(trial_block,df=l), data=d))
}
which.min(a)
plot(a)
a<-rep(0,15)
for(l in 6:20){
a[l]<-AIC(lm(Guilt~ns(trial_block,df=l), data=d))
}
which.min(a)
d<-subset(dat, groups==unique(dat$groups)[2])
a<-rep(0,15)
for(l in 6:20){
a[l]<-AIC(lm(Guilt~ns(trial_block,df=l), data=d))
}
which.min(a)
d<-subset(dat, groups==unique(dat$groups)[3])
a<-rep(0,15)
for(l in 6:20){
a[l]<-AIC(lm(Guilt~ns(trial_block,df=l), data=d))
}
which.min(a)
plot(as.factor(d$trial_block), d$Guilt)
plot(predict(lm(Guilt~ns(trial_block,df=l), data=d), 1:20))
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=l), data=d)))
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=l), data=d)), 1:20)
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=l), data=d)), data.frame(trial_block=1:20)))
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=l), data=d)), data.frame(trial_block=1:20))
predict(lm(Guilt~ns(trial_block,df=l), data=d)), data.frame(trial_block=1:20)
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=l), data=d), data.frame(trial_block=1:20))
)
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=2), data=d), data.frame(trial_block=1:20))
)
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=8), data=d), data.frame(trial_block=1:20)))
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=5), data=d), data.frame(trial_block=1:20)))
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=5), data=d), data.frame(trial_block=1:20)), type="l")
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=6), data=d), data.frame(trial_block=1:20)), type="l")
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=20), data=d), data.frame(trial_block=1:20)), type="l")
plot( 1:20, predict(lm(Guilt~ns(trial_block,df=3), data=d), data.frame(trial_block=1:20)), type="l")
?ns
require(mgcv)
m<-lm(Guilt~s(trial_block), data=d)
m<-lm(Guilt~s(trial_block), data=d)
m<-gam(Guilt~trial_block, data=d)
predict(m, 1:20)
predict(m)
predict(m, newdata = 1:20)
predict(m, newdata = data.frame(trial_block=1:20))
plot(predict(m, newdata = data.frame(trial_block=1:20)))
m<-gam(Guilt~trial_block, data=d)
plot(predict(m, newdata = data.frame(trial_block=1:20)))
m<-gam(Guilt~s(trial_block), data=d)
plot(predict(m, newdata = data.frame(trial_block=1:20)))
p<-predict(m, newdata = data.frame(trial_block=1:20))
p<-predict(m, newdata = data.frame(trial_block=1:20), se.fit = TRUE)
p
plot(p$fit)
plot(p$fit, type="l", lwd=2)
polygon
?polygon
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
polygon(p$fit, p$fit-p$se.fit)
plot(p$fit, type="l", lwd=2)
polygon(p$fit, p$fit-p$se.fit)
plot(p$fit, type="l", lwd=2, ylim=c(50,100))
plot(p$fit, type="l", lwd=2, ylim=c(50,90))
polygon(p$fit, p$fit-p$se.fit)
polygon(p$fit, (p$fit-p$se.fit))
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
plot(p$fit, type="l", lwd=2, ylim=c(50,90))
polygon(c(20:1, 1:20), c(rev(p$fit), p$fit-p$se.fit), col = 'grey80', border = NA)
plot(p$fit, type="l", lwd=2, ylim=c(50,90))
polygon(c(20:1, 1:20), c(rev(p$fit-0.1), p$fit-p$se.fit), col = 'grey80', border = NA)
plot(p$fit, type="l", lwd=2, ylim=c(50,90))
polygon(c(20:1, 1:20), c(rev(p$fit+p$se.fit), p$fit-p$se.fit), col = 'grey80', border = NA)
lines(1:20, p$fit)
m<-gam(Guilt~s(trial_block), data=d)
p<-predict(m, newdata = data.frame(trial_block=1:20), se.fit = TRUE)
plot(p$fit, type="l", lwd=2, ylim=c(50,90))
polygon(c(20:1, 1:20), c(rev(p$fit+p$se.fit), p$fit-p$se.fit), col = 'grey40', border = NA)
lines(1:20, p$fit)
p<-predict(m, newdata = data.frame(trial_block=1:20), se.fit = TRUE)
plot(p$fit, type="l", lwd=2, ylim=c(50,90))
polygon(c(20:1, 1:20), c(rev(p$fit+p$se.fit), p$fit-p$se.fit), col = 'grey90', border = NA)
lines(1:20, p$fit)
#Cross-Validation of Different TTB-variants
#Copyright@Schulz, Meder & Speekenbrink
#House keeping
rm(list=ls())
#set wd
setwd("/home/hanshalbe/Desktop/TTBABC")
#read in data
data<-read.csv("data/city.csv")
data$X<-NULL
#Load packages
packages <- c('ggplot2', 'plyr', 'Rcpp', 'matrixStats')
lapply(packages, library, character.only = TRUE)
#Source files for R
source("R/permutations.R")
source("R/ttbabcfit.R")
source("R/ttbabcpredict.R")
#Source files for Rcpp
sourceCpp("C++/pairwise.cpp")
sourceCpp("C++/takethebeast.cpp")
sourceCpp("C++/ttb.cpp")
sourceCpp("C++/mysplit.cpp")
#Establish ground truth
##All pairwise comparisons
allcomps<-pairwise(as.matrix(data))
#mark y
marky<-ncol(data)
#mark columns of X
endx<-marky-1
#threshold, win=1, loss=-1
allcomps[,marky]<-ifelse(allcomps[,marky]>0,1,-1)
#X is all independent variables
X<-allcomps[,1:endx]
#y is the dependent variable
y<-allcomps[,marky]
#find best cue order by brute force
allperms<-matrix((1:endx)[permutations(endx)], ncol=endx)
#weights have to be give
weights<-sign(cor(X,y))
#take the beast finds best cue order by brute force
m<-takethebeast(validities = allperms-1, weights=weights[,1], x=as.matrix(X), y=y)
#remember the best order
bestorder<-allperms[which.max(m$checks),]
#get rid of big vectors and matrices
rm(m,allperms)
#calculate best score by discounted cumulative gain
bestscore<-9:1/log2(1:9)
bestscore<-ifelse(bestscore==Inf,9,bestscore)
#get sume
best<-sum(bestscore)
#times of comparisons here fixed to be 30
times<-50
#proportions of learning set
props<-seq(0.1,0.9,0.1)
#final storage matrix
dfinal<-matrix(NA,nrow=9, ncol=12)
#loop over proportions
for (h in seq_along(props)){
#dummy frame
dout<-data.frame(abcmu=rep(0,times), abcscore=rep(0,times),
ttbmu=rep(0,times), ttbscore=rep(0,times),
ttnmu=rep(0,times), ttnscore=rep(0,times))
#check times number of times
for (i in 1:times){
#split up frame into learning and test frame
splitted<-mysplit(as.matrix(data), proportion = props[h])
#learn set
learnset<-pairwise(as.matrix(splitted$learn))
#test set
testset<-pairwise(as.matrix(splitted$test))
#X_learn: independent variables of learning set
X_learn<-learnset[,-marky]
#X_test: independent variables of learning set
X_test<-testset[,-marky]
#y_learn: dependent of learning set
y_learn<-sign(learnset[,marky]-0.01)
#y_test dependent of test set
y_test<-sign(testset[,marky]-0.01)
#TTB_ABC
##Fit model
mabc<-ttbabcfit(X=X_learn, y=y_learn, epsilon=0.65, nsamples=80, nsims=500)
#get mean predictive performance
dout$abcmu[i]<-mean(ttbabcpredict(mabc, testset[,-ncol(testset)])$class==y_test)
#get importance order
abcimp<-order(mabc$m$ballcounts)
#match orders
abcorder<-rep(0,length(abcimp))
for (k in seq_along(bestorder)){
abcorder[which(abcimp==bestorder[k])]<-marky-k
}
#get score
abcscore<-abcorder/log2(1:endx)
abcscore<-ifelse(abcscore==Inf,abcorder,abcscore)
#standardise
dout$abcscore[i]<-sum(abcscore)/best
#Classic TTB
##positive validity
positive<-apply(X_learn,2, function(x){sum(x==y_learn)/sum(x!=0)})
positive<-ifelse(is.nan(positive), 0, positive)
positive<-ifelse(is.na(positive), 0, positive)
#negative validty
negative<-apply(X_learn,2, function(x){sum(x==-y_learn)/sum(x!=0)})
negative<-ifelse(is.nan(negative), 0, negative)
negative<-ifelse(is.na(negative), 0, negative)
#classic order
classicorder<-matrix(rank(1-rowMaxs(cbind(positive, negative))), nrow=1)
#predictions
preds<-sign(ttb(validities = classicorder-1, weights = sign(positive-0.50001), x = as.matrix(X_test)))
#store predictive performance
dout$ttbmu[i]<-mean(preds$class==y_test)
#get importance
ttbimp<-order(classicorder)
#match with true order
ttborder<-rep(0,length(ttbimp))
for (k in seq_along(ttborder)){
ttborder[which(ttbimp==bestorder[k])]<-marky-k
}
#calculate discounted cumulative gain
ttbscore<-ttborder/log2(1:endx)
ttbscore<-ifelse(ttbscore==Inf,ttborder,ttbscore)
#store in frame
dout$ttbscore[i]<-sum(ttbscore)/best
#Updated TTB (Newell et. al, 2004)
##validty
validity<-apply(cbind(positive, negative),1, max)
#discrimination rate
discrimination<-apply(X_learn,2, function(x){sum(x!=0)})/nrow(X_learn)
#updated cue validity, corrected for discrimination rate
updated<-validity*discrimination+0.5*(1-discrimination)
#updated order
updatedorder<-matrix(rank(1-updated), nrow=1)
#get predictions
preds<-sign(ttb(validities = updatedorder-1, weights = sign(positive-0.50001), x = as.matrix(X_test)))
#check predictive performance
dout$ttnmu[i]<-mean(preds$class==y_test)
#get importance
ttnimp<-order(updatedorder)
#match with true order
ttnorder<-rep(0,length(ttnimp))
for (k in seq_along(ttnorder)){
ttnorder[which(ttnimp==bestorder[k])]<-marky-k
}
#calculate discounted cumulative gain
ttnscore<-ttnorder/log2(1:endx)
ttnscore<-ifelse(ttnscore==Inf,ttnorder,ttnscore)
#stanardise and store
dout$ttnscore[i]<-sum(ttnscore)/best
}
#get mean performance per model
dfinal[h,1:6]<-apply(dout,2,function(x){mean(x, na.omit=TRUE)})
#get standard error of mean performance per model
dfinal[h,7:12]<-apply(dout,2, function(x){sd(na.omit(x))/sqrt(length(na.omit(x)))})
#save on the go
write.csv(dfinal, "data/citycross.csv")
}
